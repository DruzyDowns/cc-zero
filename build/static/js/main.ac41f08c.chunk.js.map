{"version":3,"sources":["images/close-icon.svg","images/loader.svg","Gif.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Gif","props","state","loaded","this","images","className","src","web","url","onLoadedData","setState","Component","Header","clearSearch","hasResults","onClick","require","UserHint","loading","hintText","randomChoice","arr","Math","floor","random","length","App","searchGiphy","searchTerm","a","async","fetch","response","json","data","rando","prevState","gifs","handleChange","event","value","target","handleKeyPress","key","textInput","focus","map","gif","ref","input","placeholder","onChange","onKeyPress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac41f08c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close-icon.a464734a.svg\";","module.exports = __webpack_public_path__ + \"static/media/loader.66e3da26.svg\";","import React, { Component } from \"react\";\n\nclass Gif extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: true,\n    };\n  }\n\n  render() {\n    const { loaded } = this.state;\n    const { images } = this.props;\n    return (\n      <img\n        className={`grid-item video ${loaded && \"loaded\"}`}\n        src={images.web.url}\n        onLoadedData={() => this.setState({ loaded: true })}\n      />\n    );\n  }\n}\n\nexport default Gif;\n","import React, { Component } from \"react\";\nimport Gif from \"./Gif\";\n\nconst Header = ({ clearSearch, hasResults }) => (\n  <div className=\"header grid\">\n    {\" \"}\n    {hasResults ? (\n      <button>\n        <img\n          onClick={clearSearch}\n          src={require(\"./images/close-icon.svg\")}\n          className=\"block mx-auto\"\n        />\n      </button>\n    ) : (\n      <h1 className=\"title\">\n        Cleveland Museum of Art â€” open access API Explorer\n      </h1>\n    )}\n  </div>\n);\n\nconst UserHint = ({ loading, hintText }) => (\n  <div className=\"user-hint\">\n    {loading ? (\n      <img src={require(\"./images/loader.svg\")} className=\"block mx-auto\" />\n    ) : (\n      hintText\n    )}\n  </div>\n);\n\nconst randomChoice = (arr) => {\n  const randIndex = Math.floor(Math.random() * arr.length);\n  return arr[randIndex];\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: \"\",\n      hintText: \"\",\n      gifs: [],\n    };\n  }\n\n  searchGiphy = async (searchTerm) => {\n    this.setState({\n      loading: true,\n    });\n    try {\n      const response = await fetch(\n        `https://openaccess-api.clevelandart.org/api/artworks/?cc0&q=${searchTerm}&limit=50`\n      );\n      const { data } = await response.json();\n\n      if (!data.length) {\n        throw `Nothing found for ${searchTerm}, please try another search`;\n      }\n\n      const rando = randomChoice(data);\n      //console.log(data[0].images.original.mp4);\n\n      //const gif = rando.images.original.mp4\n      this.setState((prevState, props) => ({\n        ...prevState,\n        gifs: [...prevState.gifs, rando],\n        hintText: `Press enter for more ${searchTerm}`,\n        loading: false,\n      }));\n    } catch (error) {\n      this.setState((prevState, props) => ({\n        ...prevState,\n        loading: false,\n        hintText: error,\n      }));\n    }\n  };\n\n  handleChange = (event) => {\n    const { value } = event.target;\n    this.setState((prevState, props) => ({\n      ...prevState,\n      searchTerm: value,\n      hintText: value.length > 2 ? `Press enter to search for ${value}` : \"\",\n    }));\n  };\n\n  handleKeyPress = (event) => {\n    const { value } = event.target;\n    if (value.length > 2 && event.key === \"Enter\") {\n      //alert(`Search for ${value}`);\n      this.searchGiphy(value);\n    }\n  };\n\n  clearSearch = () => {\n    this.setState((prevState, props) => ({\n      ...prevState,\n      searchTerm: \"\",\n      hintText: \"\",\n      gifs: [],\n    }));\n    //document.querySelector(\"input\").focus();\n    this.textInput.focus();\n  };\n\n  render() {\n    const { searchTerm, gifs } = this.state;\n    const hasResults = gifs.length;\n    return (\n      <div className=\"page\">\n        <Header clearSearch={this.clearSearch} hasResults={hasResults} />\n        <div className=\"search grid\">\n          {}\n          {}\n\n          {this.state.gifs.map((gif) => (\n            <Gif {...gif} />\n          ))}\n\n          <input\n            ref={(input) => {\n              this.textInput = input;\n            }}\n            className=\"input grid-item\"\n            placeholder=\"Type something!\"\n            onChange={this.handleChange}\n            onKeyPress={this.handleKeyPress}\n            value={searchTerm}\n          />\n        </div>\n        <UserHint {...this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/main.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}